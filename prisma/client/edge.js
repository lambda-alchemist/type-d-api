
Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  NotFoundError,
  decompressFromBase64,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions
} = require('./runtime/edge')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.8.1
 * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
 */
Prisma.prismaVersion = {
  client: "4.8.1",
  engine: "d6e67a83f971b175a593ccc12e15c4a757f93ffe"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.NotFoundError = NotFoundError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}


const dirname = '/'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TaskScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  name: 'name',
  stat: 'stat',
  updated_at: 'updated_at',
  created_at: 'created_at'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  updated_at: 'updated_at',
  created_at: 'created_at'
});


exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Task: 'Task'
});

const compressedDMMF = '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'
const decompressedDMMF = decompressFromBase64(compressedDMMF)
// We are parsing 2 times, as we want independent objects, because
// DMMFClass introduces circular references in the dmmf object
const dmmf = JSON.parse(decompressedDMMF)
exports.Prisma.dmmf = JSON.parse(decompressedDMMF)

/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/alkemist/code/type-d-api/prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [],
    "previewFeatures": [
      "deno"
    ],
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "..",
  "clientVersion": "4.8.1",
  "engineVersion": "d6e67a83f971b175a593ccc12e15c4a757f93ffe",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "dataProxy": true
}
config.document = dmmf
config.dirname = dirname

config.inlineSchema = 'CmdlbmVyYXRvciBjbGllbnQgewoJcHJvdmlkZXIgICAgICAgID0gInByaXNtYS1jbGllbnQtanMiCglvdXRwdXQgICAgICAgICAgPSAiLi9jbGllbnQiCglwcmV2aWV3RmVhdHVyZXMgPSBbImRlbm8iXQp9CgpkYXRhc291cmNlIGRiIHsKCXByb3ZpZGVyID0gInBvc3RncmVzcWwiCgl1cmwgICAgICA9IGVudigiU1VQQUJBU0VfVVJMIikKfQoKbW9kZWwgVXNlciB7CglpZCAgICAgICAgIFN0cmluZyAgIEBkYi5VdWlkIEBpZAoJdXNlcm5hbWUgICBTdHJpbmcgICBAZGIuVmFyQ2hhcig2NCkKCWVtYWlsICAgICAgU3RyaW5nICAgQGRiLlZhckNoYXIoOTYpIEB1bmlxdWUKCXBhc3N3b3JkICAgU3RyaW5nCiAgdXBkYXRlZF9hdCBEYXRlVGltZSBAZGVmYXVsdChub3coKSkgQHVwZGF0ZWRBdAoJY3JlYXRlZF9hdCBEYXRlVGltZSBAZGVmYXVsdChub3coKSkKCXRhc2sgICAgICAgVGFza1tdCn0KCm1vZGVsIFRhc2sgewoJaWQgICAgICAgICBTdHJpbmcgICBAZGIuVXVpZCBAaWQKCXVzZXJfaWQgICAgU3RyaW5nICAgQGRiLlV1aWQKCW5hbWUgICAgICAgU3RyaW5nICAgQGRiLlZhckNoYXIoOTYpCglzdGF0ICAgICAgIEJvb2xlYW4gIEBkZWZhdWx0KGZhbHNlKQoJdXBkYXRlZF9hdCBEYXRlVGltZSBAZGVmYXVsdChub3coKSkgQHVwZGF0ZWRBdAoJY3JlYXRlZF9hdCBEYXRlVGltZSBAZGVmYXVsdChub3coKSkKCXVzZXIgICAgICAgVXNlciAgICAgQHJlbGF0aW9uKGZpZWxkczogW3VzZXJfaWRdLCByZWZlcmVuY2VzOiBbaWRdKQp9Cg=='
config.inlineSchemaHash = '733ac7381c1affbc563cce6c8e3843a3e2529e5cc1a8dbe2cdb46aa19bd75d65'

config.inlineDatasources = {
  "db": {
    "url": {
      "fromEnvVar": "SUPABASE_URL",
      "value": null
    }
  }
}

config.injectableEdgeEnv = {
  parsed: {
    SUPABASE_URL: typeof globalThis !== 'undefined' && globalThis['SUPABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.SUPABASE_URL || undefined
  }
}

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

